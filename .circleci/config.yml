version: 2.1

orbs:
    slack: circleci/slack@4.4.4
    secrethub: secrethub/cli@1.1.0
    gh: circleci/github-cli@1.0.5
    aws-cli: circleci/aws-cli@2.0.6

executors:
    node-lts:
        parameters:
            class:
                description: The resource class
                type: enum
                enum: ["small", "medium", "large", "xlarge"]
                default: "medium"
        docker:
            - image: cimg/node:14.18
        resource_class: << parameters.class >>

commands:
    restore-maven-cache:
        description: Restore Maven cache
        steps:
            - restore_cache:
                  keys:
                      - gravitee-api-management-v6-{{ checksum ".apim-version.txt" }}

    save-maven-cache:
        description: "Save maven cache for the workflow. We only save external dependencies to force gravitee artefacts download"
        steps:
            - run:
                  name: "Exclude Gravitee internal dependencies from cache"
                  command: |
                      if [ -d ~/.m2/io/gravitee ]; then
                        rm -rf ~/.m2/io/gravitee
                      fi;
                      if [ -d ~/.m2/com/graviteesource ]; then
                        rm -rf ~/.m2/com/graviteesource
                      fi;
            - save_cache:
                  paths:
                      - ~/.m2
                  key: gravitee-api-management-v6-{{ checksum ".apim-version.txt" }}
                  when: always

    notify-on-failure:
        steps:
            - slack/notify:
                  branch_pattern: master
                  event: fail
                  template: basic_fail_1

    get-apim-tag:
        steps:
            - run:
                  name: Read tag of Docker images to deploy
                  command: |
                      export TAG=$(cat ./.docker-tag.txt)
                      # Workaround for sharing this variable to the next steps
                      echo "export TAG=$TAG" >> $BASH_ENV

    get-apim-version:
        steps:
            - run:
                  name: Read APIM version
                  command: |
                      export APIM_VERSION=$(cat ./.apim-version.txt)
                      # Workaround for sharing this variable to the next steps
                      echo "export APIM_VERSION=$APIM_VERSION" >> $BASH_ENV

    prepare-gpg:
        description: Prepare GPG command
        steps:
            - secrethub/install
            - run:
                  command: |
                      secrethub read graviteeio/cicd/graviteebot/gpg/armor_format_pub_key -o pub.key
                      gpg --import pub.key

                      secrethub read graviteeio/cicd/graviteebot/gpg/armor_format_private_key -o private.key
                      # Need --batch to be able to import private key
                      gpg --import --batch private.key

parameters:
    gio_action:
        type: enum
        enum: [release, standalone_release, standalone_release_replay, nexus_staging, vm_nexus_staging, pull_requests]
        default: pull_requests
    dry_run:
        type: boolean
        default: true
        description: "Run in dry run mode?"
    maven_profile_id:
        type: string
        default: "gravitee-dry-run"
        description: "Maven ID of the Maven profile to use for a dry run ?"
    secrethub_org:
        type: string
        default: "graviteeio"
        description: "SecretHub Org to use to fetch secrets ?"
    secrethub_repo:
        type: string
        default: "cicd"
        description: "SecretHub Repo to use to fetch secrets ?"
    s3_bucket_name:
        type: string
        default: ""
        description: "Name of the S3 Bucket used to store and retrieve the state of the maven project, to perform the nexus staging ?"
    replayed_release:
        type: string
        default: ""
        description: "What is the version number of the release you want to replay? (Mandatory, only for the 'standalone_release_replay' Workflow / see 'gio_action' pipeline parameter)"

jobs:
    load-maven-configuration:
        docker:
            - image: cimg/base:stable
        environment:
            MAVEN_SETTINGS: "secrethub://graviteeio/cicd/graviteebot/infra/maven/gravitee.settings.xml"
        steps:
            - secrethub/exec:
                  command: echo $MAVEN_SETTINGS > /tmp/.gravitee.settings.xml
            - persist_to_workspace:
                  root: /tmp
                  paths:
                      - .gravitee.settings.xml

    compute-apim-tag:
        docker:
            - image: cimg/base:stable
        resource_class: small
        steps:
            - run:
                  name: Compute Tag for Docker images
                  command: |
                      export TAG=${CIRCLE_BRANCH}-latest
                      # Workaround for sharing this variable to the next steps
                      echo "export TAG=$TAG" >> $BASH_ENV
                      echo "Docker images will be tagged with: ${TAG}"
                      echo $TAG > .docker-tag.txt
            - persist_to_workspace:
                  root: .
                  paths:
                      - .docker-tag.txt

    compute-apim-version:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: small
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore_cache:
                  name: Restore Maven cache for compute-version job
                  keys:
                      - gravitee-api-management-compute-version-{{ .Branch }}-{{ checksum "pom.xml" }}
            - run:
                  name: Compute APIM Version
                  command: |
                      export APIM_VERSION=$(mvn exec:exec -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive --quiet --settings .gravitee.settings.xml)
                      echo "export APIM_VERSION=$APIM_VERSION" >> $BASH_ENV
                      echo "Gravitee APIM version: ${APIM_VERSION}"
                      echo $APIM_VERSION > .apim-version.txt
            - save_cache:
                  name: Save Maven cache for compute-tag job
                  paths:
                      - ~/.m2
                  key: gravitee-api-management-compute-version-{{ .Branch }}-{{ checksum "pom.xml" }}
                  when: always
            - persist_to_workspace:
                  root: .
                  paths:
                      - .apim-version.txt

    sonarcloud-analysis:
        description: A job that run Sonarcloud analysis
        parameters:
            working_directory:
                description: "Directory where the Sonarcloud analysis will be run"
                default: "gravitee-apim-rest-api"
                type: string
        docker:
            - image: sonarsource/sonar-scanner-cli
        resource_class: medium
        steps:
            - run:
                  name: Add SSH tool
                  command: apk add --no-cache openssh
            - checkout
            - attach_workspace:
                  at: .
            - secrethub/env-export:
                  secret-path: graviteeio/cicd/graviteebot/infra/sonarcloud.io.token
                  var-name: SONAR_TOKEN
            - run:
                  name: Run Sonarcloud Analysis
                  command: sonar-scanner
                  working_directory: << parameters.working_directory >>
            - notify-on-failure

    validate:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: small
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore-maven-cache
            - run:
                  name: "validate project"
                  command: |
                      mvn validate --no-transfer-progress --projects '!gravitee-apim-console-webui, !gravitee-apim-portal-webui' --settings .gravitee.settings.xml  --threads 2C

            - notify-on-failure
            - save-maven-cache

    build:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: large
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore-maven-cache
            - run:
                  name: "Build project"
                  command: |
                      mvn clean package --activate-profiles distribution-dev -DskipTests -Dskip.validation=true --no-transfer-progress --projects '!gravitee-apim-console-webui, !gravitee-apim-portal-webui' --settings .gravitee.settings.xml  --threads 2C
                      mkdir -p ./rest-api-docker-context/distribution && cp -r ./gravitee-apim-rest-api/gravitee-apim-rest-api-standalone/gravitee-apim-rest-api-standalone-distribution/target/distribution ./rest-api-docker-context/.
                      mkdir -p ./gateway-docker-context/distribution && cp -r ./gravitee-apim-gateway/gravitee-apim-gateway-standalone/gravitee-apim-gateway-standalone-distribution/target/distribution ./gateway-docker-context/.

            - notify-on-failure
            - save-maven-cache
            - persist_to_workspace:
                  root: ./
                  paths:
                      - ./gravitee-*/*/target/*
                      - ./rest-api-docker-context
                      - ./gateway-docker-context

    test:
        machine:
            image: ubuntu-2004:202107-02
        resource_class: xlarge
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore-maven-cache
            - run:
                  name: Run tests
                  command: |
                      # Need to use `package` phase to get repo-test's jar build and shared to mongodb and jdbc repos
                      mvn package -Dskip.validation=true --no-transfer-progress --projects '!gravitee-apim-console-webui, !gravitee-apim-portal-webui' --settings .gravitee.settings.xml  --threads 2C
            - run:
                  name: Save test results
                  command: |
                      mkdir -p ~/test-results/junit/
                      find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
                  when: always
            - notify-on-failure
            - store_test_results:
                  path: ~/test-results

    publish-on-artifactory:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: large
        environment:
            ALT_DEPLOYMENT_REPOSITORY: "artifactory-gravitee::default::https://odbxikk7vo-artifactory.services.clever-cloud.com/gravitee-snapshots"
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore-maven-cache
            - run:
                  name: "Maven Package and deploy to Artifactory ([gravitee-snapshots] repository)"
                  command: |
                      mvn deploy --activate-profiles gio-artifactory-snapshot -DskipTests -Dskip.validation=true --no-transfer-progress --projects '!gravitee-apim-console-webui, !gravitee-apim-portal-webui' --settings .gravitee.settings.xml  --threads 2C
            - save-maven-cache
            - notify-on-failure

    publish-on-nexus:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: large
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore-maven-cache
            - run:
                  name: "Maven Package and deploy to Nexus Snapshots"
                  command: |
                      mvn deploy -DskipTests -Dskip.validation=true --no-transfer-progress --projects '!gravitee-apim-console-webui, !gravitee-apim-portal-webui' --settings .gravitee.settings.xml  --threads 2C
            - save-maven-cache
            - notify-on-failure

    publish-images-azure-registry:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: small
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - setup_remote_docker
            - get-apim-tag
            - get-apim-version
            - run:
                  name: Build & Publish Management API and Gateway Docker Image to Azure Registry
                  command: |
                      export REST_API_PRIVATE_IMAGE_TAG=graviteeio.azurecr.io/apim-management-api:${TAG}
                      export REST_API_PUBLIC_IMAGE_TAG=graviteeio/apim-management-api:${TAG}

                      export GATEWAY_PRIVATE_IMAGE_TAG=graviteeio.azurecr.io/apim-gateway:${TAG}
                      export GATEWAY_PUBLIC_IMAGE_TAG=graviteeio/apim-gateway:${TAG}

                      docker build -f gravitee-apim-rest-api/docker/Dockerfile-dev \
                      --build-arg GRAVITEEIO_VERSION=${APIM_VERSION} \
                      -t ${REST_API_PRIVATE_IMAGE_TAG} \
                      -t ${REST_API_PUBLIC_IMAGE_TAG} \
                      rest-api-docker-context

                      docker build -f gravitee-apim-gateway/docker/Dockerfile-dev \
                      --build-arg GRAVITEEIO_VERSION=${APIM_VERSION} \
                      -t ${GATEWAY_PRIVATE_IMAGE_TAG} \
                      -t ${GATEWAY_PUBLIC_IMAGE_TAG} \
                      gateway-docker-context

                      if [[ $CIRCLE_BRANCH =~ ^([0-9]+\.[0-9]+\.x|master)$ ]]
                      then
                        echo $DOCKERHUB_BOT_USER_TOKEN | docker login --username $DOCKERHUB_BOT_USER_NAME --password-stdin
                        docker push ${REST_API_PUBLIC_IMAGE_TAG}
                        docker push ${GATEWAY_PUBLIC_IMAGE_TAG}
                        docker logout
                      fi

                      echo $AZURE_DOCKER_REGISTRY_PASSWORD | docker login --username $AZURE_DOCKER_REGISTRY_USERNAME --password-stdin graviteeio.azurecr.io
                      docker push ${REST_API_PRIVATE_IMAGE_TAG}
                      docker push ${GATEWAY_PRIVATE_IMAGE_TAG}
                      docker logout graviteeio.azurecr.io

            - notify-on-failure

    cypress-install:
        executor:
            name: node-lts
            class: small
        steps:
            - checkout
            - restore_cache:
                  name: Restore NPM cache
                  keys:
                      - gravitee-apim-cypress-cache-v1-{{ checksum "gravitee-apim-cypress/package-lock.json" }}
            - run:
                  name: Install dependencies
                  command: npm install
                  working_directory: gravitee-apim-cypress
            - notify-on-failure
            - save_cache:
                  name: Save NPM cache
                  key: gravitee-apim-cypress-cache-v1-{{ checksum "gravitee-apim-cypress/package-lock.json" }}
                  paths:
                      - ./gravitee-apim-cypress/node_modules
            - persist_to_workspace:
                  root: .
                  paths:
                      - gravitee-apim-cypress/node_modules

    cypress-lint-test:
        executor:
            name: node-lts
            class: medium
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - run:
                  name: Check License
                  command: npm run lint:license
                  working_directory: gravitee-apim-cypress
            - run:
                  name: Run Prettier and ESLint
                  command: npm run lint
                  working_directory: gravitee-apim-cypress
            - run:
                  name: Run unit tests
                  command: echo "Will run 'npm run test:ci' in the future"
                  working_directory: gravitee-apim-cypress
            - notify-on-failure

    webui-install:
        parameters:
            apim-ui-project:
                type: string
                default: ""
                description: the name of the UI project to build
        executor:
            name: node-lts
            class: small
        steps:
            - checkout
            - restore_cache:
                  name: Restore NPM cache
                  keys:
                      - << parameters.apim-ui-project >>-cache-v1-{{ checksum "<< parameters.apim-ui-project >>/package-lock.json" }}
            - run:
                  name: Install dependencies
                  command: npm install
                  working_directory: << parameters.apim-ui-project >>
            - notify-on-failure
            - save_cache:
                  name: Save NPM cache
                  key: << parameters.apim-ui-project >>-cache-v1-{{ checksum "<< parameters.apim-ui-project >>/package-lock.json" }}
                  paths:
                      - ./<< parameters.apim-ui-project >>/node_modules
            - persist_to_workspace:
                  root: .
                  paths:
                      - << parameters.apim-ui-project >>/node_modules

    webui-lint-test:
        parameters:
            apim-ui-project:
                type: string
                default: ""
                description: the name of the UI project to build
            resource-class:
                type: string
                default: medium
        executor:
            name: node-lts
            class: << parameters.resource-class>>
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - run:
                  name: Check License
                  command: npm run lint:license
                  working_directory: << parameters.apim-ui-project >>
            - run:
                  name: Run Prettier and ESLint
                  command: npm run lint
                  working_directory: << parameters.apim-ui-project >>
            - run:
                  name: Run unit tests
                  command: npm run test:coverage
                  working_directory: << parameters.apim-ui-project >>
            - notify-on-failure
            - persist_to_workspace:
                  root: .
                  paths:
                      - << parameters.apim-ui-project >>/coverage
            - store_test_results:
                  path: << parameters.apim-ui-project >>/coverage

    webui-build:
        parameters:
            apim-ui-project:
                type: string
                default: ""
                description: the name of the UI project to build
        executor:
            name: node-lts
            class: large
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - run:
                  name: Build
                  command: npm run build:prod
                  environment:
                      NODE_OPTIONS: --max_old_space_size=4086
                      BACKEND_ENV: element-zero
                  working_directory: << parameters.apim-ui-project >>
            - run:
                  name: Zip dist folder
                  # TODO:
                  #  - Use gzip instead of zip
                  command: zip -r dist.zip dist
                  working_directory: << parameters.apim-ui-project >>
            - notify-on-failure
            - persist_to_workspace:
                  root: .
                  paths:
                      - << parameters.apim-ui-project >>/dist

    webui-publish-images-azure-registry:
        parameters:
            apim-ui-project:
                type: string
                default: ""
                description: the name of the UI project to build
            docker-image-name:
                type: string
                default: ""
                description: the name of the docker image to create
        docker:
            - image: cimg/openjdk:11.0
        resource_class: small
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - setup_remote_docker
            - get-apim-tag
            - run:
                  name: Build & Publish Web UI Docker Image to Azure Registry
                  command: |
                      cp -fr docker/config .
                      cp -fr docker/run.sh .

                      export PUBLIC_IMAGE_TAG=graviteeio/<< parameters.docker-image-name >>:${TAG}
                      export PRIVATE_IMAGE_TAG=graviteeio.azurecr.io/<< parameters.docker-image-name >>:${TAG}
                      docker build -f docker/Dockerfile-dev -t ${PRIVATE_IMAGE_TAG} -t ${PUBLIC_IMAGE_TAG} .

                      if [[ $CIRCLE_BRANCH =~ ^([0-9]+\.[0-9]+\.x|master)$ ]]
                      then
                        echo $DOCKERHUB_BOT_USER_TOKEN | docker login --username $DOCKERHUB_BOT_USER_NAME --password-stdin
                        docker push ${PUBLIC_IMAGE_TAG}
                        docker logout
                      fi

                      echo $AZURE_DOCKER_REGISTRY_PASSWORD | docker login --username $AZURE_DOCKER_REGISTRY_USERNAME --password-stdin graviteeio.azurecr.io
                      docker push ${PRIVATE_IMAGE_TAG}
                      docker logout graviteeio.azurecr.io
                  working_directory: << parameters.apim-ui-project >>
            - notify-on-failure

    console-webui-build-storybook:
        executor:
            name: node-lts
            class: large
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - run:
                  name: Build
                  command: npm run build-storybook
                  working_directory: gravitee-apim-console-webui
                  environment:
                      NODE_OPTIONS: --max_old_space_size=3072
            - notify-on-failure
            - persist_to_workspace:
                  root: .
                  paths:
                      - gravitee-apim-console-webui/storybook-static

    console-webui-chromatic-deployment:
        executor:
            class: small
            name: node-lts
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - secrethub/exec:
                  step-name: Running Chromatic
                  # TODO:
                  #  - Handle npx chromatic command failure, make the job fails
                  #  - Create a new project in Chromatic and update the token
                  command: |
                      SB_URL=$(cd gravitee-apim-console-webui && npx chromatic --project-token=$CHROMATIC_PROJECT_TOKEN --exit-once-uploaded -d=storybook-static | grep -o "View your Storybook at https:\/\/[0-9a-z-]*\.chromatic\.com" | grep -o "https:.*")
                      echo "export SB_URL=$SB_URL" >> $BASH_ENV
            - gh/setup
            - run:
                  name: Edit Pull Request Description
                  command: |
                      # First check there is an associated pull request, otherwise just stop the job here
                      if ! gh pr view --json title;
                      then
                        echo "No PR found for this branch, stopping the job here."
                        exit 0
                      fi

                      # If PR state is different from OPEN
                      if [ "$(gh pr view --json state --jq .state)" != "OPEN" ];
                      then
                        echo "PR is not opened, stopping the job here."
                        exit 0
                      fi

                      export PR_BODY_STORYBOOK_SECTION="
                      <!-- Storybook placeholder -->
                      ---

                      📚&nbsp;&nbsp;View the storybook of this branch [here](${SB_URL})
                      <!-- Storybook placeholder end -->
                      "

                      export CLEAN_BODY=$(gh pr view --json body --jq .body | sed '/Storybook placeholder -->/,/Storybook placeholder end -->/d')

                      gh pr edit --body "$CLEAN_BODY$PR_BODY_STORYBOOK_SECTION"
            - notify-on-failure

    console-webui-deploy-on-azure-storage:
        docker:
            - image: mcr.microsoft.com/azure-cli:latest
        resource_class: small
        steps:
            - attach_workspace:
                  at: .
            - run:
                  name: Login into Azure Storage and upload dist
                  # TODO:
                  #  - Update CircleCI env var AZURE_STORAGE_CONNECTION_STRING (one for Console, one for Portal)
                  command: |
                      export BRANCH_ID=$(echo "$CIRCLE_BRANCH" | sed -E 's/[~^]+//g' | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+|-+$//g' | tr "[:upper:]" "[:lower:]" | cut -c -60)
                      az login --service-principal -u $AZURE_APPLICATION_ID --tenant $AZURE_TENANT -p $AZURE_APPLICATION_SECRET
                      az storage container create -n $BRANCH_ID --public-access blob
                      az storage blob upload-batch -s gravitee-apim-console-webui/dist -d $BRANCH_ID
            - notify-on-failure

    console-webui-comment-pr-after-deployment:
        executor:
            name: node-lts
            class: small
        steps:
            - checkout
            - gh/setup
            - run:
                  name: Edit Pull Request Description
                  command: |
                      # First check there is an associated pull request, otherwise just stop the job here
                      if ! gh pr view --json title;
                      then
                        echo "No PR found for this branch, stopping the job here."
                        exit 0
                      fi

                      # If PR state is different from OPEN
                      if [ "$(gh pr view --json state --jq .state)" != "OPEN" ];
                      then
                        echo "PR is not opened, stopping the job here."
                        exit 0
                      fi

                      export BRANCH_ID=$(echo "$CIRCLE_BRANCH" | sed -E 's/[~^]+//g' | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+|-+$//g' | tr "[:upper:]" "[:lower:]" | cut -c -60)
                      export PR_BODY_UI_SECTION="
                      <!-- UI placeholder -->
                      🚀 CI was able to deploy the build of this PR, so you can now try it directly [here](https://apimnightlywebui24386.blob.core.windows.net/${BRANCH_ID}/index.html)
                      _Notes_: The deployed app is linked to the management API of the Element Zero team's environment.
                      <!-- UI placeholder end -->
                      "

                      export CLEAN_BODY=$(gh pr view --json body --jq .body | sed '/UI placeholder -->/,/UI placeholder end -->/d')

                      gh pr edit --body "$CLEAN_BODY$PR_BODY_UI_SECTION"

            - notify-on-failure

    purge-master-azure-registry:
        docker:
            - image: mcr.microsoft.com/azure-cli:latest
        resource_class: small
        steps:
            - run:
                  name: 🗑 Let's purge all master Apim images older than 1d
                  # TODO:
                  #  - Improve purge of other images and branches
                  command: |
                      az login --service-principal -u $AZURE_APPLICATION_ID --tenant $AZURE_TENANT -p $AZURE_APPLICATION_SECRET
                      az acr run --cmd "acr purge --filter 'apim-management-ui:master-.*' --untagged --ago 1d --keep 3" --registry graviteeio /dev/null
            - notify-on-failure

    deploy-on-azure-cluster:
        docker:
            - image: mcr.microsoft.com/azure-cli:latest
        resource_class: small
        steps:
            - attach_workspace:
                  at: .
            - get-apim-tag
            - run:
                  name: Install Helm
                  command: |
                      curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
                      helm version
            - run:
                  name: Install Kubectl
                  command: |
                      curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
                      chmod +x ./kubectl
                      mv ./kubectl /usr/local/bin/kubectl
                      kubectl version --client=true
            - run:
                  name: Helm upgrade and 🚀 to Element Zero cluster
                  command: |
                      if [ "master" == "${CIRCLE_BRANCH}" ]
                      then
                          az login --service-principal -u $AZURE_APPLICATION_ID --tenant $AZURE_TENANT -p $AZURE_APPLICATION_SECRET
                          az aks get-credentials --resource-group element-zero --name element-zero

                          helm upgrade --repo https://helm.gravitee.io \
                                      --install apim \
                                      -n apim \
                                      --reuse-values \
                                      apim3 \
                                       --set "api.image.repository=graviteeio.azurecr.io/apim-management-api" \
                                       --set "api.image.tag=${TAG}" \
                                       --set "portal.image.repository=graviteeio.azurecr.io/apim-portal-ui" \
                                       --set "portal.image.tag=${TAG}" \
                                       --set "ui.image.repository=graviteeio.azurecr.io/apim-management-ui" \
                                       --set "ui.image.tag=${TAG}" \
                                       --set "gateway.image.repository=graviteeio.azurecr.io/apim-gateway" \
                                       --set "gateway.image.tag=${TAG}" \
                                       --set "redis.repositoryVersion=3.12.1"
                      fi
            - run:
                  name: Helm upgrade and 🚀 to APIM cluster
                  command: |
                      export K8S_NAMESPACE=apim-${CIRCLE_BRANCH//\./-}

                      az login --service-principal -u $AZURE_APPLICATION_ID --tenant $AZURE_TENANT -p $AZURE_APPLICATION_SECRET
                      az aks get-credentials --resource-group apim-hprod --name apim-hprod

                      helm upgrade --repo https://helm.gravitee.io \
                                   --install apim \
                                   -n ${K8S_NAMESPACE} \
                                   --reuse-values \
                                   apim3 \
                                   --set "api.image.repository=graviteeio.azurecr.io/apim-management-api" \
                                   --set "api.image.tag=${TAG}" \
                                   --set "portal.image.repository=graviteeio.azurecr.io/apim-portal-ui" \
                                   --set "portal.image.tag=${TAG}" \
                                   --set "ui.image.repository=graviteeio.azurecr.io/apim-management-ui" \
                                   --set "ui.image.tag=${TAG}" \
                                   --set "gateway.image.repository=graviteeio.azurecr.io/apim-gateway" \
                                   --set "gateway.image.tag=${TAG}" \
                                   --set "redis.repositoryVersion=3.12.1"

                      kubectl rollout restart deployment/apim-apim3-api -n ${K8S_NAMESPACE}
                      kubectl rollout restart deployment/apim-apim3-portal -n ${K8S_NAMESPACE}
                      kubectl rollout restart deployment/apim-apim3-ui -n ${K8S_NAMESPACE}
                      kubectl rollout restart deployment/apim-apim3-gateway -n ${K8S_NAMESPACE}

            - notify-on-failure

    ## Release Jobs
    release:
        docker:
            - image: cimg/openjdk:11.0.13
        resource_class: large

        environment:
            DRY_RUN: << pipeline.parameters.dry_run >>
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - restore-maven-cache
            - run:
                  name: Update maven dependencies versions from properties and remove `-SNAPSHOT` from versions
                  command: |
                      # Update maven dependencies versions from properties
                      mvn versions:update-properties --batch-mode -Dmaven.version.rules.serverId=artifactory-gravitee -Dincludes=io.gravitee.*:* -DallowMajorUpdates=false -DallowMinorUpdates=false -DallowIncrementalUpdates=true -DgenerateBackupPoms=false --settings .gravitee.settings.xml --update-snapshots

                      # Remove `-SNAPSHOT` from versions
                      mvn versions:set --batch-mode -DremoveSnapshot=true -DgenerateBackupPoms=false --settings .gravitee.settings.xml
            - prepare-gpg
            - run:
                  name: Prepare env variables used in [version.properties] files and Maven deploy to Gravitee's private Artifactory"
                  command: |
                      export BUILD_ID=${CIRCLE_BUILD_NUM}
                      export BUILD_NUMBER=${CIRCLE_BUILD_NUM}
                      export GIT_COMMIT=$(git rev-parse --short HEAD)

                      mvn clean deploy --activate-profiles gio-artifactory-release,gio-release --batch-mode -DskipTests -Dskip.validation=true --settings .gravitee.settings.xml --update-snapshots
            - save-maven-cache
            - add_ssh_keys:
                  fingerprints:
                      - "ac:88:23:8f:c6:0f:7d:f0:fc:df:73:20:34:56:02:6c"
            - run:
                  name: Git config
                  command: |
                      git config --global user.name "${GIT_USER_NAME}"
                      git config --global user.email "${GIT_USER_EMAIL}"
            - get-apim-version
            - run:
                  name: Git release
                  command: |
                      # APIM_VERSION has been computed from the pom.xml BEFORE the effective release process
                      export MVN_PRJ_VERSION=${APIM_VERSION%-SNAPSHOT}
                      export MVN_PRJ_VERSION_MAJOR=$(echo $MVN_PRJ_VERSION | awk -F '.' '{print $1}')
                      export MVN_PRJ_VERSION_MINOR=$(echo $MVN_PRJ_VERSION | awk -F '.' '{print $2}')
                      export MVN_PRJ_VERSION_PATCH=$(echo $MVN_PRJ_VERSION | awk -F '.' '{print $3}')

                      export CURRENT_GIT_BRANCH=$(git branch --show-current)
                      export MAINTENANCE_GIT_BRANCH="${MVN_PRJ_VERSION_MAJOR}.${MVN_PRJ_VERSION_MINOR}.x"
                      export GIT_BRANCH_FILTER=$(git branch -a | grep "${MAINTENANCE_GIT_BRANCH}")

                      git add --update
                      git commit -m "${MVN_PRJ_VERSION}"
                      git tag ${MVN_PRJ_VERSION}

                      # If support branch for this version does not exist, create it, update versions, commit and push
                      if [ "x${GIT_BRANCH_FILTER}" == "x" ]; then
                        git checkout -b ${MAINTENANCE_GIT_BRANCH}
                        # Set the version to the next support version (bump patch version + '-SNAPSHOT')                        
                        mvn versions:set --batch-mode -DnextSnapshot=true -DgenerateBackupPoms=false --settings .gravitee.settings.xml
                        git add --update
                        git commit -m 'chore: prepare next version [skip ci]'
                        if [ "${DRY_RUN}" == "false" ]; then
                          echo "# --->>> NO IT IS NOT A DRY RUN : GIT PUSH"
                          git push -u origin ${MAINTENANCE_GIT_BRANCH}
                          git push --tags origin ${MAINTENANCE_GIT_BRANCH}
                        else
                          echo "# --->>> THIS IS A DRY RUN : SKIPPPING GIT PUSH"
                        fi;
                        git checkout ${CURRENT_GIT_BRANCH}
                      fi;

                      # If releasing a feature version (i.e. patch number == 0) then bump the minor version for the next 
                      if [ "${MVN_PRJ_VERSION_PATCH}" == "0" ]; then
                        export NEXT_MINOR_VERSION=$((${MVN_PRJ_VERSION_MINOR}+1))
                        export NEXT_SNAPSHOT_VERSION="${MVN_PRJ_VERSION_MAJOR}.${NEXT_MINOR_VERSION}.0-SNAPSHOT"
                        mvn versions:set --batch-mode -DnewVersion=${NEXT_SNAPSHOT_VERSION} -DgenerateBackupPoms=false --settings .gravitee.settings.xml
                      else
                        # Else just set the version to the next support version (bump patch version + '-SNAPSHOT')                        
                        mvn versions:set --batch-mode -DnextSnapshot=true -DgenerateBackupPoms=false --settings .gravitee.settings.xml
                      fi;
                      git add --update
                      git commit -m 'chore: prepare next version [skip ci]'
                      if [ "${DRY_RUN}" == "false" ]; then
                        echo "# --->>> NO IT IS NOT A DRY RUN"
                        echo " so that CURRENT_GIT_BRANCH=MAINTENANCE_GIT_BRANCH"
                        git push -u origin ${CURRENT_GIT_BRANCH}
                        git push --tags origin ${CURRENT_GIT_BRANCH}
                      else
                        echo "# --->>> THIS IS A DRY RUN"
                      fi;
    nexus-staging:
        docker:
            - image: cimg/openjdk:11.0
        resource_class: medium

        steps:
            - run:
                  name: get tag to release from bucket name
                  command: |
                      export APIM_TAG=$(echo << pipeline.parameters.s3_bucket_name >> | sed 's/prepared-nexus-staging-gravitee-apim-//' | sed 's/_/./g')
                      echo "export APIM_TAG=$APIM_TAG" >> $BASH_ENV
            - run:
                  name: checkout APIM with the tag
                  command: |
                      mkdir project
                      cd project
                      git clone --depth 1 --branch $APIM_TAG $CIRCLE_REPOSITORY_URL .
            - run:
                  name: create .apim-version file for cache
                  command: |
                    # the previous cache key was computed with the SNAPSHOT version of the release. 
                    echo "${APIM_TAG}-SNAPSHOT" > .apim-version.txt
            - restore-maven-cache
            - attach_workspace:
                  at: .
            - prepare-gpg
            - run:
                  name: Release on Nexus
                  command: |
                      mvn clean deploy --activate-profiles gravitee-release --batch-mode -DskipTests -Dskip.validation=true --settings .gravitee.settings.xml --update-snapshots

workflows:
    pull_requests:
        when:
            and:
                - equal: [pull_requests, << pipeline.parameters.gio_action >>]
        jobs:
            - load-maven-configuration:
                  context: cicd-orchestrator
            - compute-apim-version:
                  requires:
                      - load-maven-configuration
            - validate:
                  context: gravitee-qa
                  requires:
                      - compute-apim-version
            - build:
                  context: gravitee-qa
                  requires:
                      - validate
            - test:
                  requires:
                      - build
            - sonarcloud-analysis:
                  name: Sonar - << matrix.working_directory >>
                  matrix:
                      parameters:
                          working_directory:
                              - gravitee-apim-rest-api
                              - gravitee-apim-repository
                              - gravitee-apim-gateway
                  context: cicd-orchestrator
                  requires:
                      - test
            - publish-on-artifactory:
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
                              - fix-nexus-pb
                  requires:
                      - test
            - publish-on-nexus:
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
                              - fix-nexus-pb
                  requires:
                      - test
            - compute-apim-tag
            - publish-images-azure-registry:
                  context: cicd-orchestrator
                  requires:
                      - test
                      - compute-apim-tag
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/docker-registries/graviteeio/username
                            var-name: AZURE_DOCKER_REGISTRY_USERNAME
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/docker-registries/graviteeio/password
                            var-name: AZURE_DOCKER_REGISTRY_PASSWORD
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/graviteebot/infra/dockerhub-user-name
                            var-name: DOCKERHUB_BOT_USER_NAME
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/graviteebot/infra/dockerhub-user-token
                            var-name: DOCKERHUB_BOT_USER_TOKEN
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
            - webui-install:
                  name: Install APIM Console
                  apim-ui-project: gravitee-apim-console-webui
                  requires:
                      - load-maven-configuration
            - webui-lint-test:
                  name: Lint & test APIM Console
                  apim-ui-project: gravitee-apim-console-webui
                  requires:
                      - Install APIM Console
            - console-webui-build-storybook:
                  requires:
                      - Install APIM Console
            - console-webui-chromatic-deployment:
                  context: cicd-orchestrator
                  requires:
                      - console-webui-build-storybook
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/graviteebot/github_personal_access_token
                            var-name: GITHUB_TOKEN
            - webui-build:
                  name: Build APIM Console
                  apim-ui-project: gravitee-apim-console-webui
                  requires:
                      - Install APIM Console
            - console-webui-deploy-on-azure-storage:
                  context: cicd-orchestrator
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/application-id
                            var-name: AZURE_APPLICATION_ID
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/tenant
                            var-name: AZURE_TENANT
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/application-secret
                            var-name: AZURE_APPLICATION_SECRET
                  requires:
                      - Build APIM Console
            - console-webui-comment-pr-after-deployment:
                  context: cicd-orchestrator
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/graviteebot/github_personal_access_token
                            var-name: GITHUB_TOKEN
                  requires:
                      - console-webui-deploy-on-azure-storage
            - webui-publish-images-azure-registry:
                  name: Build and publish APIM Console docker image
                  apim-ui-project: gravitee-apim-console-webui
                  docker-image-name: apim-management-ui
                  context: cicd-orchestrator
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/docker-registries/graviteeio/username
                            var-name: AZURE_DOCKER_REGISTRY_USERNAME
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/docker-registries/graviteeio/password
                            var-name: AZURE_DOCKER_REGISTRY_PASSWORD
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/graviteebot/infra/dockerhub-user-name
                            var-name: DOCKERHUB_BOT_USER_NAME
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/graviteebot/infra/dockerhub-user-token
                            var-name: DOCKERHUB_BOT_USER_TOKEN
                  requires:
                      - Build APIM Console
                      - compute-apim-tag
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
            - webui-install:
                  name: Install APIM Portal
                  apim-ui-project: gravitee-apim-portal-webui
                  requires:
                      - load-maven-configuration
            - webui-lint-test:
                  name: Lint & test APIM Portal
                  apim-ui-project: gravitee-apim-portal-webui
                  resource-class: large
                  requires:
                      - Install APIM Portal
            - sonarcloud-analysis:
                  name: Sonar - << matrix.working_directory >>
                  matrix:
                      parameters:
                          working_directory:
                              - gravitee-apim-console-webui
                              - gravitee-apim-portal-webui
                  context: cicd-orchestrator
                  requires:
                      - Lint & test APIM Console
                      - Lint & test APIM Portal
            - webui-build:
                  name: Build APIM Portal
                  apim-ui-project: gravitee-apim-portal-webui
                  requires:
                      - Install APIM Portal
            - webui-publish-images-azure-registry:
                  name: Build and publish APIM Portal docker image
                  apim-ui-project: gravitee-apim-portal-webui
                  docker-image-name: apim-portal-ui
                  context: cicd-orchestrator
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/docker-registries/graviteeio/username
                            var-name: AZURE_DOCKER_REGISTRY_USERNAME
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/docker-registries/graviteeio/password
                            var-name: AZURE_DOCKER_REGISTRY_PASSWORD
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/graviteebot/infra/dockerhub-user-name
                            var-name: DOCKERHUB_BOT_USER_NAME
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/graviteebot/infra/dockerhub-user-token
                            var-name: DOCKERHUB_BOT_USER_TOKEN
                  requires:
                      - Build APIM Portal
                      - compute-apim-tag
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
            - deploy-on-azure-cluster:
                  context: cicd-orchestrator
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/application-id
                            var-name: AZURE_APPLICATION_ID
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/tenant
                            var-name: AZURE_TENANT
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/azure/application-secret
                            var-name: AZURE_APPLICATION_SECRET
                  requires:
                      - publish-images-azure-registry
                      - Build and publish APIM Console docker image
                      - Build and publish APIM Portal docker image
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
              # To be modified when testing strategy will be defined
            - cypress-install:
                  requires:
                      - build
            - cypress-lint-test:
                  requires:
                      - cypress-install

    # call by the orchestrator
    release:
        when:
            equal: [release, << pipeline.parameters.gio_action >>]
        jobs:
            - load-maven-configuration:
                  context: cicd-orchestrator
            - compute-apim-version:
                  requires:
                      - load-maven-configuration
            - release:
                  name: release <<# pipeline.parameters.dry_run >>- Dry run<</ pipeline.parameters.dry_run >>
                  requires:
                      - compute-apim-version
                  context: cicd-orchestrator
                  pre-steps:
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/graviteebot/git/user/name
                            var-name: GIT_USER_NAME
                      - secrethub/env-export:
                            secret-path: graviteeio/cicd/graviteebot/git/user/email
                            var-name: GIT_USER_EMAIL

    # call by the orchestrator
    nexus_staging:
        when:
            equal: [nexus_staging, << pipeline.parameters.gio_action >>]
        jobs:
            - load-maven-configuration:
                  context: cicd-orchestrator
            - nexus-staging:
                  context: cicd-orchestrator
                  requires:
                      - load-maven-configuration
